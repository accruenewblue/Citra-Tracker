import json
import tkinter
from tkinter import *
from tkinter import ttk
monsfile=open(r'C:\Users\scien\Documents\GitHub\Orange-Peeler\mon-data',"r+")
mons=json.load(monsfile)
movesfile=open(r"C:\Users\scien\Documents\GitHub\Orange-Peeler\move-data")
moves=json.load(movesfile)
abilitiesfile=open(r"C:\Users\scien\Documents\GitHub\Orange-Peeler\ability-data")
abilities=json.load(abilitiesfile)
trackertempfile=open(r"C:\Users\scien\Documents\GitHub\Orange-Peeler\trackertemp")
trackertemp=json.load(trackertempfile)
#arrays for defining the effectiveness of typed attacks or special moves
typetable={
"Normal":[1,1,1,1,1,.5,1,0,.5,1,1,1,1,1,1,1,1,1,1],
"Fighting":[2,1,.5,.5,1,2,.5,0,2,1,1,1,1,.5,2,1,2,.5,1],
"Flying":[1,2,1,1,1,.5,2,1,.5,1,1,2,.5,1,1,1,1,1,1],
"Poison":[1,1,1,.5,.5,.5,1,.5,0,1,1,2,1,1,1,1,1,2,1],
"Ground":[1,1,0,2,1,2,.5,1,2,2,1,.5,2,1,1,1,1,1,1],
"Rock":[1,.5,2,1,.5,1,2,1,.5,2,1,1,1,1,2,1,1,1,1],
"Bug":[1,.5,.5,.5,1,1,1,.5,.5,.5,1,2,1,2,1,1,2,.5,1],
"Ghost":[0,1,1,1,1,1,1,2,1,1,1,1,1,2,1,1,.5,1,1],
"Steel":[1,1,1,1,1,2,1,1,.5,.5,.5,1,.5,1,2,1,1,2,1],
"Fire":[1,1,1,1,1,.5,2,1,2,.5,.5,2,1,1,2,.5,1,1,1],
"Water":[1,1,1,1,2,2,1,1,1,2,.5,.5,1,1,1,.5,1,1,1],
"Grass":[1,1,.5,.5,2,2,.5,1,.5,.5,2,.5,1,1,1,.5,1,1,1],
"Electric":[1,1,2,1,0,1,1,1,1,1,2,.5,.5,1,1,.5,1,1,1],
"Psychic":[1,2,1,2,1,1,1,1,.5,1,1,1,1,.5,1,1,0,1,1],
"Ice":[1,1,2,1,2,1,1,1,.5,.5,.5,2,1,1,.5,2,1,1,1],
"Dragon":[1,1,1,1,1,1,1,1,.5,1,1,1,1,1,1,2,1,0,1],
"Dark":[1,.5,1,1,1,1,1,2,1,1,1,1,1,2,1,1,.5,.5,1],
"Fairy":[1,2,1,.5,1,1,1,1,.5,.5,1,1,1,1,1,2,2,1,1],
"Null":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
"Freeze-Dry":[1,1,2,1,2,1,1,1,.5,.5,2,2,1,1,.5,2,1,1,1],
"FreezeDryNormalize":[1,1,1,1,1,.5,1,0,.5,1,2,1,1,1,1,1,1,1,1],
"DeltaStreamElectric":[1,1,1,1,0,1,1,1,1,1,2,.5,.5,1,1,.5,1,1,1],
"DeltaStreamIce":[1,1,1,1,2,1,1,1,.5,.5,.5,2,1,1,.5,2,1,1,1],
"DeltaStreamRock":[1,.5,1,1,.5,1,2,1,.5,2,1,1,1,1,2,1,1,1,1],
"FlyingPress":[2,2,.5,.5,1,1,1,0,1,1,1,2,.5,.5,2,1,2,.5,1],
"FlyingPressElectrify":[1,2,2,1,0,.5,2,1,.5,1,2,1,.25,1,1,.5,1,1,1],
"FlyingPressNormalize":[1,2,1,1,1,.25,2,0,.25,1,1,2,.5,1,1,1,1,1,1],
"ThousandArrows":[1,1,1,2,1,2,.5,1,2,2,1,.5,2,1,1,1,1,1,1]}
#defines the columns for the arrays corresponding to the type hit
typedic={
    "Normal":0,
    "Fighting":1,
    "Flying":2,
    "Poison":3,
    "Ground":4,
    "Rock":5,
    "Bug":6,
    "Ghost":7,
    "Steel":8,
    "Fire":9,
    "Water":10,
    "Grass":11,
    "Electric":12,
    "Psychic":13,
    "Ice":14,
    "Dragon":15,
    "Dark":16,
    "Fairy":17,
    "Null":18,}
#extracts and calculates relevant type combo for defenders
def coverage(movetype,attacker,defender,attabil,currweat,currterr):
    typemult=1
    weatmult=1
    stabmult=1
    terrmult=1
    for item in range(0,len(mons[defender]["types"])):
        typemult=typemult*(typetable[movetype][typedic[mons[defender]["types"][item]]])
    if movetype in mons[attacker]["types"]:
        if attabil=="adaptability":
            stabmult=2
        else:
            stabmult=1.5
    if currterr=="grassy":
        if movetype=="Grass":
            terrmult=1.5
    if currterr=="misty":
        if movetype=="Dragon":
            terrmult=.5
    if currterr=="electric":
        if movetype=="Electric":
            terrmult=1.5
    if currterr=="psychic":
        if movetype=="Psychic":
            terrmult=1.5
    if currweat=="sun":
        if movetype=="Fire":
            weatmult=1.5
        if movetype=="Water":
            weatmult=.5
    if currweat=="rain":
        if movetype=="Fire":
            weatmult=.5
        if movetype=="Water":
            weatmult=1.5
    return typemult*weatmult*stabmult*terrmult
#gui
tracking=Tk()
tracking.geometry("400x240")
tracking.title("Tracker")
status=["-","Burn","Poison","Sleep","Paralysis","Frozen"]
statustext=status[0]
def statuschange():
    print(status.index(statustext))
    statustext=status[status.index(statustext)+1]
statusbutton=Button(tracking,text=statustext,command=statuschange)
statusbutton.grid(row=8,column=4)
def searchdict(dict, text):
    for item in dict:
        if item==text:
            return item
def movedisplay():
    if move1entry.get()!="":
        if opponen.get()!="":
            coverage1=str(coverage(moves[move1entry.get()]["type"],monentry.get(),opponen.get(),abilentry.get(),"null","null"))
        else:
            coverage1=""
        move1label=Label(tracking, text="  "+moves[move1entry.get()]["type"]+", "+moves[move1entry.get()]["pp"]+", "+moves[move1entry.get()]["power"]+", "+moves[move1entry.get()]["acc"]+", "+coverage1)
        move1label.grid(row=3, column=8)
    if move2entry.get()!="":
        if opponen.get()!="":
            coverage2=str(coverage(moves[move2entry.get()]["type"],monentry.get(),opponen.get(),abilentry.get(),"null","null"))
        else:
            coverage2=""
        move2label=Label(tracking, text="  "+moves[move2entry.get()]["type"]+", "+moves[move2entry.get()]["pp"]+", "+moves[move2entry.get()]["power"]+", "+moves[move2entry.get()]["acc"]+", "+coverage2)
        move2label.grid(row=5, column=8)
    if move3entry.get()!="":
        if opponen.get()!="":
            coverage3=str(coverage(moves[move3entry.get()]["type"],monentry.get(),opponen.get(),abilentry.get(),"null","null"))
        else:
            coverage3=""
        move3label=Label(tracking, text="  "+moves[move3entry.get()]["type"]+", "+moves[move3entry.get()]["pp"]+", "+moves[move3entry.get()]["power"]+", "+moves[move3entry.get()]["acc"]+", "+coverage3)
        move3label.grid(row=7, column=8)
    if move4entry.get()!="":
        if opponen.get()!="":
            coverage4=str(coverage(moves[move4entry.get()]["type"],monentry.get(),opponen.get(),abilentry.get(),"null","null"))
        else:
            coverage4=""
        move4label=Label(tracking, text="  "+moves[move4entry.get()]["type"]+", "+moves[move4entry.get()]["pp"]+", "+moves[move4entry.get()]["power"]+", "+moves[move4entry.get()]["acc"]+", "+coverage4)
        move4label.grid(row=9, column=8)
    monbst=Label(tracking, text=(mons[str(monentry.get())]["bst"]+", "+mons[str(monentry.get())]["lastseenat"]))
    monbst.grid(row=2, column=3)
    montype=Label(tracking, text=mons[str(monentry.get())]["types"])
    montype.grid(row=2, column=4)
    oppbst=Label(tracking, text=(mons[str(opponen.get())]["bst"]+", "+mons[str(opponen.get())]["lastseenat"]))
    oppbst.grid(row=6, column=3)
    opptype=Label(tracking, text=mons[str(opponen.get())]["types"])
    opptype.grid(row=6, column=4)
monimage=Button(tracking,text="hi",image=PhotoImage())
monimage.grid(row=1,column=1)
def playermondata():
    if monentry.get()!="":
        trackertemp["yourmon"]=monentry.get()
        trackertempfile=(r"C:\Users\scien\Documents\GitHub\Orange-Peeler\trackertemp")
        with open(trackertempfile, "w") as f:
            json.dump(trackertemp, f)
        Mon1_Data()
monlabel=Button(tracking, text="Your Mon",command=playermondata)
monlabel.grid(row=1, column=3)
monentry=Entry(tracking, width=14)
monentry.grid(row=1,column=4)
def open_abildata():
    if abilentry.get()!="":
        Ability_Data(abilentry.get())
abillabel=Button(tracking, text = "Abilities",command=open_abildata)
abillabel.grid(row=4, column=3)
abilentry=Entry(tracking, width=14)
abilentry.grid(row=4,column=4)
itemlabel=Label(tracking, text = "Held Item")
itemlabel.grid(row=3, column=3)
itementry=Entry(tracking, width=14)
itementry.grid(row=3,column=4)
strinlabel=Label(tracking, text = "String")
strinlabel.grid(row=5, column=3)
strinentry=Entry(tracking, width=14)
strinentry.grid(row=5,column=4)
hplabel=Label(tracking, text = "HP")
hplabel.grid(row=3, column=1)
hpentry=Entry(tracking, width=4)
hpentry.grid(row=3,column=2)
atklabel=Label(tracking, text = "ATK")
atklabel.grid(row=4, column=1)
atkentry=Entry(tracking, width=4)
atkentry.grid(row=4,column=2)
deflabel=Label(tracking, text = "DEF")
deflabel.grid(row=5, column=1)
defentry=Entry(tracking, width=4)
defentry.grid(row=5,column=2)
spalabel=Label(tracking, text = "SPA")
spalabel.grid(row=6, column=1)
spaentry=Entry(tracking, width=4)
spaentry.grid(row=6,column=2)
spdlabel=Label(tracking, text = "SPD")
spdlabel.grid(row=7, column=1)
spdentry=Entry(tracking, width=4)
spdentry.grid(row=7,column=2)
spelabel=Label(tracking, text = "SPE")
spelabel.grid(row=8, column=1)
speentry=Entry(tracking, width=4)
speentry.grid(row=8,column=2)
acclabel=Label(tracking, text = "ACC")
acclabel.grid(row=9, column=1)
accentry=Entry(tracking, width=4)
accentry.grid(row=9,column=2)
badgelabel=Label(tracking, text = "Badges")
badgelabel.grid(row=1, column=9)
badge1=Checkbutton(tracking,text="1")
badge1.grid(row=2,column=9)
badge2=Checkbutton(tracking,text="2")
badge2.grid(row=3,column=9)
badge3=Checkbutton(tracking,text="3")
badge3.grid(row=4,column=9)
badge4=Checkbutton(tracking,text="4")
badge4.grid(row=5,column=9)
badge5=Checkbutton(tracking,text="5")
badge5.grid(row=6,column=9)
badge6=Checkbutton(tracking,text="6")
badge6.grid(row=7,column=9)
badge7=Checkbutton(tracking,text="7")
badge7.grid(row=8,column=9)
badge8=Checkbutton(tracking,text="8")
badge8.grid(row=9,column=9)
movelabel=Label(tracking, text = "Moves")
movelabel.grid(row=1, column=8)
move1entry=Entry(tracking, width=18)
move1entry.grid(row=2,column=8)
move2entry=Entry(tracking, width=18)
move2entry.grid(row=4,column=8)
move3entry=Entry(tracking, width=18)
move3entry.grid(row=6,column=8)
move4entry=Entry(tracking, width=18)
move4entry.grid(row=8,column=8)
movesaver=Button(tracking, text = "Display", command=movedisplay)
movesaver.grid(row=8, column=3)
def oppmondata():
    if opponen.get()!="":
        trackertemp["yourmon"]=opponen.get()
        trackertempfile=(r"C:\Users\scien\Documents\GitHub\Orange-Peeler\trackertemp")
        with open(trackertempfile, "w") as f:
            json.dump(trackertemp, f)
        a = Mon1_Data()
opponen=Entry(tracking, width=14)
opponen.grid(row=7,column=4)
opponentb=Button(tracking, text="Opponent",command=oppmondata)
opponentb.grid(row=7, column=3)
levllabel=Label(tracking, text = "Level")
levllabel.grid(row=2, column=1)
levlentry=Entry(tracking, width=4)
levlentry.grid(row=2,column=2)
def jsonsave():
    mon1=monentry.get()
    abilcont=abilentry.get()
    if searchdict(abilities, abilcont)!=None:
        mons[mon1]["ability"].append(abilcont)
    movecont=[move1entry.get(),move2entry.get(),move3entry.get(),move4entry.get(),]
    levlcont=levlentry.get()
    for move in movecont:
        if searchdict(moves, move)!=None:
            mons[mon1]["moves"].append(move+", "+levlcont)
    mons[mon1]["lastseenat"]=levlcont
    if strinentry.get()!="":
        mons[mon1]["stringnote"]=strinentry.get()
    if hpentry.get()!="":
        mons[mon1]["notes"][0]=hpentry.get()
    if atkentry.get()!="":
        mons[mon1]["notes"][1]=atkentry.get()
    if defentry.get()!="":
        mons[mon1]["notes"][2]=defentry.get()
    if spaentry.get()!="":
        mons[mon1]["notes"][3]=spaentry.get()
    if spdentry.get()!="":
        mons[mon1]["notes"][4]=spdentry.get()
    if speentry.get()!="":
        mons[mon1]["notes"][5]=speentry.get()
jsonsaver=Button(tracking, text = "Save", command=jsonsave)
jsonsaver.grid(row=9, column=3)
def NotesClearer():
    clearer=Toplevel()
    clearer.title("Are you sure?")
    clearer.geometry("215x85")
    CLEARer=Label(clearer,justify="center",text="Are you sure you would like to do this? This clears all the notes stored so far. Only recommended when a seed dies.",wraplength=220)
    CLEARer.grid(row=1,column=1)
    def noteclear():
        for mon in mons:
            mons[mon]["ability"]=[]
            mons[mon]["notes"]=["","","","","",""]
            mons[mon]["stringnote"]=""
            mons[mon]["lastseenat"]="-"
            mons[mon]["moves"]=[]
        clearer.destroy()
    notesclear=Button(clearer, text = "Clear Notes", command=noteclear)
    notesclear.grid(row=2, column=1)
notesclear=Button(tracking, text = "Clear Notes", command=NotesClearer)
notesclear.grid(row=9, column=4)
def Ability_Data(abil):
    abili=Toplevel()
    abili.title("Ability Data")
    abili.geometry("300x50")
    abilitydata=Label(abili,text=abilities[abil]["detail"],wraplength=300)
    abilitydata.pack()
def Mon1_Data():
    mon1dat=Toplevel()
    mon1dat.title("Mon Data")
    mon1dat.geometry("300x240")
    for abil in mons[trackertemp["yourmon"]]["ability"]:
        abilloc=mons[trackertemp["yourmon"]]["ability"].index(abil)
        abillabel=Button(mon1dat, text=abil,command=lambda abil=abil:Ability_Data(abil))
        #abil=abil stores the value of it when written
        #I thought it normally did that, but apparently otherwise it only calls that after???
        abillabel.grid(row=5+abilloc, column=4)
        abilentry=Label(mon1dat, text="Ability "+str(1+abilloc))
        abilentry.grid(row=5+abilloc,column=3)
    for item in range(0,len(mons[trackertemp["yourmon"]]["moves"])):
        movelabel=Button(mon1dat, text=mons[trackertemp["yourmon"]]["moves"][item])
        movelabel.grid(row=1+item, column=5)
    mon1name=Label(mon1dat,text=trackertemp["yourmon"])
    mon1name.grid(row=1,column=4)
    mon1type=Label(mon1dat,text="Types")
    mon1type.grid(row=2,column=3)
    mon1type=Label(mon1dat,text=mons[trackertemp["yourmon"]]["types"])
    mon1type.grid(row=2,column=4)
    monbst=Label(mon1dat,text="BST")
    monbst.grid(row=2,column=1)
    mon1bst=Label(mon1dat,text=mons[trackertemp["yourmon"]]["bst"])
    mon1bst.grid(row=2,column=2)
    leave=Button(mon1dat, text="Leave", command=mon1dat.destroy)
    leave.grid(row=1,column=1)
    monevo=Label(mon1dat,text="Evo")
    monevo.grid(row=1,column=2)
    mon1evo=Label(mon1dat,text=mons[trackertemp["yourmon"]]["evo"])
    mon1evo.grid(row=1,column=3)
    itemlabel=Label(mon1dat, text = "Levels")
    itemlabel.grid(row=3, column=3)
    itementry=Label(mon1dat, text=mons[trackertemp["yourmon"]]["lastseenat"])
    itementry.grid(row=3,column=4)
    strinlabel=Label(mon1dat, text = "String")
    strinlabel.grid(row=4, column=3)
    strinentry=Label(mon1dat, text=mons[trackertemp["yourmon"]]["stringnote"], wraplength=150)
    strinentry.grid(row=4,column=4)
    hplabel=Label(mon1dat, text = "HP")
    hplabel.grid(row=3, column=1)
    hpentry=Label(mon1dat, text=mons[trackertemp["yourmon"]]["notes"][0])
    hpentry.grid(row=3,column=2)
    atklabel=Label(mon1dat, text = "ATK")
    atklabel.grid(row=4, column=1)
    atkentry=Label(mon1dat, text=mons[trackertemp["yourmon"]]["notes"][1])
    atkentry.grid(row=4,column=2)
    deflabel=Label(mon1dat, text = "DEF")
    deflabel.grid(row=5, column=1)
    defentry=Label(mon1dat, text=mons[trackertemp["yourmon"]]["notes"][2])
    defentry.grid(row=5,column=2)
    spalabel=Label(mon1dat, text = "SPA")
    spalabel.grid(row=6, column=1)
    spaentry=Label(mon1dat, text=mons[trackertemp["yourmon"]]["notes"][3])
    spaentry.grid(row=6,column=2)
    spdlabel=Label(mon1dat, text = "SPD")
    spdlabel.grid(row=7, column=1)
    spdentry=Label(mon1dat, text=mons[trackertemp["yourmon"]]["notes"][4])
    spdentry.grid(row=7,column=2)
    spelabel=Label(mon1dat, text = "SPE")
    spelabel.grid(row=8, column=1)
    speentry=Label(mon1dat, text=mons[trackertemp["yourmon"]]["notes"][5])
    speentry.grid(row=8,column=2)
lab=Label(tracking,text="h")
lab.grid(row=1,column=1)
mainloop()
monsfile=r"C:\Users\scien\Documents\GitHub\Orange-Peeler\mon-data"
with open(monsfile, "w") as f:
    json.dump(mons, f)